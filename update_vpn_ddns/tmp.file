# summarize these commands
docker-compose stop cron
docker-compose build
docker-compose up



How It Works
Development/Manual Mode:
The “app” service runs the Python script immediately. This is good for testing or one-off runs.

Scheduled Production Mode:
The “cron” service checks if CRON_ENABLED is "true". If so, it runs cron in the foreground. The cron daemon picks up the schedule from /etc/cron.d/mycron and runs your script accordingly.
When you want to disable the cron job, you can set CRON_ENABLED to "false" (or stop the container).

Configuration & Secrets:
The sensitive settings (API keys, directory paths, etc.) are provided in the .env file, which is git-ignored. Your public repository contains only .env.example.



So, while a container is the actual runtime instance, 
a service is the configuration blueprint that tells Docker Compose how to run that container...

Final Steps
Copy and Customize:
Copy .env.example to .env and fill in your credentials and settings.



CLARIFY - WHEN?????? HOW OFTEN?????? --when the config changes (docker-compose.yaml)
Build the Docker Image:
In your project directory, run:
docker-compose build

When docker config changes (docker-compose.yaml), rebuild docker image



Compose creates and manages one or more containers based on your service definitions
docker-compose up

Run the Services:
To test the manual run:
docker-compose run --rm app

To start the manual testing service:
docker-compose up app

To start the cron-based container/service:
docker-compose up cron

Start the Cron Service
docker-compose up -d cron
(-d runs it in detached/background mode.)


Stop the Containers:
When you’re done or need to disable the cron job:
docker-compose down

View Logs:
To troubleshoot or monitor:
docker-compose logs -f


Check If Cron Is Running
To check the running logs of the cron job:
docker logs ip_uploader_cron

Verify That the Cron Job is Loaded Check the cron jobs inside the container:
docker exec -it ip_uploader_cron crontab -l


Control Cron Execution:

To disable the cron job, either update your .env (CRON_ENABLED=false) or stop the “cron” container.
When you’re on the go (e.g., in a hotel), you can simply not start the “cron” service, or change the environment variable to disable scheduled runs.


### 4. Set Up a Cron Job

TBD
```ini
0 18 * * * cd ~/deployed_extract_public_ip && /usr/bin/python extract_public_ip_address.py >> logs/cron.log 2>&1
```


